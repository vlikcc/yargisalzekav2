name: Deploy to Google Cloud

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: europe-west1
  BACKEND_SERVICE: yargisalzeka-backend
  FRONTEND_SERVICE: yargisalzeka-frontend
  SCRAPER_SERVICE: yargisalzeka-scraper

jobs:
  # Test Job
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install backend dependencies
      run: |
        cd hukuk-asistan-main
        pip install -r requirements.txt

    - name: Run backend tests
      run: |
        cd hukuk-asistan-main
        # Add your test commands here
        echo "Backend tests passed"

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install frontend dependencies
      run: |
        cd yargisalzeka-frontend
        npm ci

    - name: Run frontend tests
      run: |
        cd yargisalzeka-frontend
        npm run test -- --run
        echo "Frontend tests passed"

    - name: Build frontend
      run: |
        cd yargisalzeka-frontend
        npm run build

  # Deploy Job (only on main branch)
  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        export_default_credentials: true

    - name: Configure Docker for GCR
      run: gcloud auth configure-docker

    - name: Build and push backend image
      run: |
        cd hukuk-asistan-main
        docker build -t gcr.io/$PROJECT_ID/backend:$GITHUB_SHA .
        docker push gcr.io/$PROJECT_ID/backend:$GITHUB_SHA

    - name: Build and push frontend image
      run: |
        cd yargisalzeka-frontend
        # Create production environment file
        echo "VITE_API_BASE_URL=https://$BACKEND_SERVICE-${{ secrets.GCP_HASH }}-ew.a.run.app" > .env.production
        docker build -t gcr.io/$PROJECT_ID/frontend:$GITHUB_SHA .
        docker push gcr.io/$PROJECT_ID/frontend:$GITHUB_SHA

    - name: Build and push scraper image
      run: |
        cd yargitay-scraper-api
        docker build -t gcr.io/$PROJECT_ID/scraper:$GITHUB_SHA .
        docker push gcr.io/$PROJECT_ID/scraper:$GITHUB_SHA

    - name: Deploy backend to Cloud Run
      run: |
        gcloud run deploy $BACKEND_SERVICE \
          --image gcr.io/$PROJECT_ID/backend:$GITHUB_SHA \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --set-env-vars ENVIRONMENT=production \
          --set-secrets GEMINI_API_KEY=gemini-api-key:latest \
          --set-secrets JWT_SECRET_KEY=jwt-secret-key:latest \
          --set-secrets GCP_PROJECT_ID=gcp-project-id:latest \
          --memory 2Gi \
          --cpu 1 \
          --max-instances 10 \
          --min-instances 1 \
          --port 8000

    - name: Deploy scraper to Cloud Run
      run: |
        gcloud run deploy $SCRAPER_SERVICE \
          --image gcr.io/$PROJECT_ID/scraper:$GITHUB_SHA \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --set-secrets GCP_PROJECT_ID=gcp-project-id:latest \
          --memory 2Gi \
          --cpu 2 \
          --max-instances 3 \
          --min-instances 0 \
          --port 8001

    - name: Get backend URL
      id: backend-url
      run: |
        BACKEND_URL=$(gcloud run services describe $BACKEND_SERVICE --region=$REGION --format='value(status.url)')
        echo "url=$BACKEND_URL" >> $GITHUB_OUTPUT

    - name: Update frontend with backend URL and deploy
      run: |
        cd yargisalzeka-frontend
        echo "VITE_API_BASE_URL=${{ steps.backend-url.outputs.url }}" > .env.production
        docker build -t gcr.io/$PROJECT_ID/frontend:$GITHUB_SHA-updated .
        docker push gcr.io/$PROJECT_ID/frontend:$GITHUB_SHA-updated
        
        gcloud run deploy $FRONTEND_SERVICE \
          --image gcr.io/$PROJECT_ID/frontend:$GITHUB_SHA-updated \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --memory 512Mi \
          --cpu 1 \
          --max-instances 5 \
          --min-instances 1 \
          --port 80

    - name: Update backend with scraper URL
      run: |
        SCRAPER_URL=$(gcloud run services describe $SCRAPER_SERVICE --region=$REGION --format='value(status.url)')
        
        gcloud run services update $BACKEND_SERVICE \
          --region $REGION \
          --set-env-vars SCRAPER_API_URL=$SCRAPER_URL

    - name: Get deployment URLs
      run: |
        echo "üöÄ Deployment completed successfully!"
        echo "Frontend URL: $(gcloud run services describe $FRONTEND_SERVICE --region=$REGION --format='value(status.url)')"
        echo "Backend URL: $(gcloud run services describe $BACKEND_SERVICE --region=$REGION --format='value(status.url)')"
        echo "Scraper URL: $(gcloud run services describe $SCRAPER_SERVICE --region=$REGION --format='value(status.url)')"

    - name: Run health checks
      run: |
        FRONTEND_URL=$(gcloud run services describe $FRONTEND_SERVICE --region=$REGION --format='value(status.url)')
        BACKEND_URL=$(gcloud run services describe $BACKEND_SERVICE --region=$REGION --format='value(status.url)')
        
        echo "Testing frontend health..."
        curl -f $FRONTEND_URL/health || echo "Frontend health check failed"
        
        echo "Testing backend health..."
        curl -f $BACKEND_URL/health || echo "Backend health check failed"
        
        echo "Testing backend detailed health..."
        curl -f $BACKEND_URL/health/detailed || echo "Backend detailed health check failed"

  # Notification Job
  notify:
    needs: [test, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "‚úÖ Deployment successful!"
          echo "üåê Your application is now live on Google Cloud Run"
        else
          echo "‚ùå Deployment failed!"
          echo "Please check the logs for more information"
        fi

