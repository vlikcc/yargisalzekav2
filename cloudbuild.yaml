# Google Cloud Build configuration for manual deployment
steps:
  # Build backend image
  - name: 'gcr.io/cloud-builders/docker'
    args: [
      'build',
      '-t', 'gcr.io/$PROJECT_ID/backend:$BUILD_ID',
      '-t', 'gcr.io/$PROJECT_ID/backend:latest',
      './hukuk-asistan-main'
    ]
    id: 'build-backend'

  # Build frontend image
  - name: 'gcr.io/cloud-builders/docker'
    args: [
      'build',
      '-t', 'gcr.io/$PROJECT_ID/frontend:$BUILD_ID',
      '-t', 'gcr.io/$PROJECT_ID/frontend:latest',
      './yargisalzeka-frontend'
    ]
    id: 'build-frontend'

  # Build scraper image
  - name: 'gcr.io/cloud-builders/docker'
    args: [
      'build',
      '-t', 'gcr.io/$PROJECT_ID/scraper:$BUILD_ID',
      '-t', 'gcr.io/$PROJECT_ID/scraper:latest',
      './yargitay-scraper-api'
    ]
    id: 'build-scraper'

  # Deploy backend to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    args: [
      'run', 'deploy', 'yargisalzeka-backend',
      '--image', 'gcr.io/$PROJECT_ID/backend:$BUILD_ID',
      '--region', 'europe-west1',
      '--platform', 'managed',
      '--allow-unauthenticated',
      '--set-env-vars', 'ENVIRONMENT=production',
      '--set-secrets', 'GEMINI_API_KEY=gemini-api-key:latest',
      '--set-secrets', 'JWT_SECRET_KEY=jwt-secret-key:latest',
      '--set-secrets', 'GCP_PROJECT_ID=gcp-project-id:latest',
      '--memory', '2Gi',
      '--cpu', '1',
      '--max-instances', '10',
      '--min-instances', '1',
      '--port', '8000'
    ]
    id: 'deploy-backend'
    waitFor: ['build-backend']

  # Deploy scraper to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    args: [
      'run', 'deploy', 'yargisalzeka-scraper',
      '--image', 'gcr.io/$PROJECT_ID/scraper:$BUILD_ID',
      '--region', 'europe-west1',
      '--platform', 'managed',
      '--allow-unauthenticated',
      '--set-secrets', 'GCP_PROJECT_ID=gcp-project-id:latest',
      '--memory', '2Gi',
      '--cpu', '2',
      '--max-instances', '3',
      '--min-instances', '0',
      '--port', '8001'
    ]
    id: 'deploy-scraper'
    waitFor: ['build-scraper']

  # Get backend URL and update backend with scraper URL
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Get scraper URL
        SCRAPER_URL=$$(gcloud run services describe yargisalzeka-scraper --region=europe-west1 --format='value(status.url)')
        
        # Update backend with scraper URL
        gcloud run services update yargisalzeka-backend \
          --region europe-west1 \
          --set-env-vars SCRAPER_API_URL=$$SCRAPER_URL
        
        echo "Backend updated with scraper URL: $$SCRAPER_URL"
    id: 'update-backend-config'
    waitFor: ['deploy-backend', 'deploy-scraper']

  # Deploy frontend to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Get backend URL
        BACKEND_URL=$$(gcloud run services describe yargisalzeka-backend --region=europe-west1 --format='value(status.url)')
        
        # Create production env file for frontend
        cd yargisalzeka-frontend
        echo "VITE_API_BASE_URL=$$BACKEND_URL" > .env.production
        
        # Rebuild frontend with correct backend URL
        docker build -t gcr.io/$PROJECT_ID/frontend:$BUILD_ID-updated .
        docker push gcr.io/$PROJECT_ID/frontend:$BUILD_ID-updated
        
        # Deploy frontend
        gcloud run deploy yargisalzeka-frontend \
          --image gcr.io/$PROJECT_ID/frontend:$BUILD_ID-updated \
          --region europe-west1 \
          --platform managed \
          --allow-unauthenticated \
          --memory 512Mi \
          --cpu 1 \
          --max-instances 5 \
          --min-instances 1 \
          --port 80
        
        echo "Frontend deployed with backend URL: $$BACKEND_URL"
    id: 'deploy-frontend'
    waitFor: ['update-backend-config']

  # Final health checks and URL display
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "üöÄ Deployment completed successfully!"
        echo ""
        echo "üì± Application URLs:"
        FRONTEND_URL=$$(gcloud run services describe yargisalzeka-frontend --region=europe-west1 --format='value(status.url)')
        BACKEND_URL=$$(gcloud run services describe yargisalzeka-backend --region=europe-west1 --format='value(status.url)')
        SCRAPER_URL=$$(gcloud run services describe yargisalzeka-scraper --region=europe-west1 --format='value(status.url)')
        
        echo "Frontend: $$FRONTEND_URL"
        echo "Backend:  $$BACKEND_URL"
        echo "Scraper:  $$SCRAPER_URL"
        echo ""
        echo "üîç Running health checks..."
        
        # Test health endpoints
        curl -f $$FRONTEND_URL/health && echo "‚úÖ Frontend health OK" || echo "‚ùå Frontend health failed"
        curl -f $$BACKEND_URL/health && echo "‚úÖ Backend health OK" || echo "‚ùå Backend health failed"
        curl -f $$BACKEND_URL/health/detailed && echo "‚úÖ Backend detailed health OK" || echo "‚ùå Backend detailed health failed"
        
        echo ""
        echo "üéâ Yargƒ±sal Zeka is now live!"
    id: 'health-check'
    waitFor: ['deploy-frontend']

# Store built images
images:
  - 'gcr.io/$PROJECT_ID/backend:$BUILD_ID'
  - 'gcr.io/$PROJECT_ID/backend:latest'
  - 'gcr.io/$PROJECT_ID/frontend:$BUILD_ID'
  - 'gcr.io/$PROJECT_ID/frontend:latest'
  - 'gcr.io/$PROJECT_ID/scraper:$BUILD_ID'
  - 'gcr.io/$PROJECT_ID/scraper:latest'

# Build options
options:
  machineType: 'E2_HIGHCPU_8'
  diskSizeGb: 100
  logging: CLOUD_LOGGING_ONLY

# Timeout
timeout: '1800s'  # 30 minutes

